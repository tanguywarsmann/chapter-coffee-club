// api/news-sitemap.xml.ts
// Google News sitemap: derniers articles (48h), max 1 000 URL, balises <news:*>

function escapeXml(s: string) {
  return String(s).replace(/[<>&'"]/g, (c) =>
    c === "<" ? "&lt;" :
    c === ">" ? "&gt;" :
    c === "&" ? "&amp;" :
    c === "'" ? "&apos;" : "&quot;"
  );
}

function humanize(slug: string) {
  try {
    const w = slug.replace(/[-_]+/g, " ").trim();
    return w.charAt(0).toUpperCase() + w.slice(1);
  } catch {
    return slug;
  }
}

export default async function handler() {
  const BASE  = process.env.SITEMAP_BASE || "https://www.vread.fr";
  const PUB   = process.env.NEWS_PUBLICATION_NAME || "Vread";
  const LANG  = process.env.NEWS_PUBLICATION_LANG || "fr";
  const url   = process.env.SITEMAP_SUPABASE_URL!;
  const key   = process.env.SITEMAP_SUPABASE_KEY!;

  if (!url || !key) {
    return new Response("Missing SITEMAP_SUPABASE_URL / SITEMAP_SUPABASE_KEY", { status: 500 });
  }

  // Récupère les posts publiés, on filtrera en mémoire sur 48h
  const qs = new URL(`${url}/rest/v1/blog_posts`);
  qs.searchParams.set("select", "slug,title,updated_at,created_at,published");
  qs.searchParams.set("published", "eq.true");
  qs.searchParams.set("order", "updated_at.desc");
  qs.searchParams.set("limit", "10000");

  const res = await fetch(qs.toString(), {
    headers: { apikey: key, Authorization: `Bearer ${key}` },
    cache: "no-store",
  });
  if (!res.ok) return new Response("Upstream error", { status: 502 });

  const rows = await res.json();

  const cutoff = Date.now() - 48 * 60 * 60 * 1000; // 48h
  const fresh  = rows
    .map((r: any) => {
      const when = new Date(r.updated_at || r.created_at || Date.now());
      return { ...r, when };
    })
    .filter((r: any) => r.when.getTime() >= cutoff)
    .slice(0, 1000); // max 1000 URL

  const head = `<?xml version="1.0" encoding="UTF-8"?>`;
  const open = `<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:news="http://www.google.com/schemas/sitemap-news/0.9">`;
  const close = `</urlset>`;

  const body = fresh.map((r: any) => {
    const loc = `${BASE}/blog/${r.slug}`;
    const title = escapeXml(r.title || humanize(r.slug));
    const pubDate = r.when.toISOString();

    return [
      `<url>`,
      `<loc>${escapeXml(loc)}</loc>`,
      `<news:news>`,
      `<news:publication>`,
      `<news:name>${escapeXml(PUB)}</news:name>`,
      `<news:language>${escapeXml(LANG)}</news:language>`,
      `</news:publication>`,
      `<news:publication_date>${pubDate}</news:publication_date>`,
      `<news:title>${title}</news:title>`,
      `</news:news>`,
      `</url>`
    ].join("");
  }).join("\n");

  const xml = [head, open, body, close].join("\n");

  return new Response(xml, {
    headers: {
      "Content-Type": "application/xml; charset=utf-8",
      // News: rafraîchissement rapide
      "Cache-Control": "s-maxage=300, stale-while-revalidate=86400",
      "X-Sitemap-Type": "news",
      "X-Sitemap-Version": "vread-news-v1"
    }
  });
}

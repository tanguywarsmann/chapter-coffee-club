
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";
import { ValidateReadingRequest, ValidateReadingResponse } from "@/types/reading";
import { getQuestionForBookSegment } from "../questionService";
import { recordReadingActivity } from "../streakService";
import { getBookReadingProgress, clearProgressCache } from "./progressService";
import { Badge } from "@/types/badge";
import { checkBadgesForUser } from "@/services/user/streakBadgeService";
import { checkUserQuests } from "@/services/questService";
import { addXP } from "@/services/user/levelService";
import { checkAndGrantMonthlyReward } from "@/services/monthlyRewardService";
import { Database } from "@/integrations/supabase/types";
import { mutate } from 'swr';

type ReadingValidationRecord = Database['public']['Tables']['reading_validations']['Insert'];
type ReadingProgressStatus = Database['public']['Enums']['reading_status'];

/**
 * Valide un segment de lecture
 * @param request Requ√™te de validation
 * @returns R√©ponse de validation avec potentiellement des badges
 */
export const validateReading = async (
  request: ValidateReadingRequest
): Promise<ValidateReadingResponse & { newBadges?: Badge[] }> => {
  try {
    console.log('üöÄ [validateReading] Validation d√©marr√©e pour user_id:', request.user_id, 'livre:', request.book_id, 'segment:', request.segment);
    
    // V√©rifier si l'utilisateur est connect√©
    const { data: sessionData } = await supabase.auth.getSession();
    if (!sessionData?.session) {
      const errorMsg = "‚ùå Utilisateur non authentifi√© lors de la validation";
      console.error(errorMsg);
      toast.error(errorMsg);
      throw new Error(errorMsg);
    }
    console.log('‚úÖ [validateReading] Session utilisateur valide');

    // V√©rifier si le segment est d√©j√† valid√©
    const progress = await getBookReadingProgress(request.user_id, request.book_id);
    console.log('üìä [validateReading] Progression existante:', progress ? `ID: ${progress.id}, chaptersRead: ${progress.chaptersRead}` : 'Aucune');
    
    // R√©cup√©rer les informations du livre pour conna√Ætre total_pages
    console.log('üìö [validateReading] R√©cup√©ration des infos du livre', request.book_id);
    const { data: bookData, error: bookError } = await supabase
      .from('books')
      .select('total_pages')
      .eq('id', request.book_id)
      .single();
    
    if (bookError) {
      console.error('‚ùå [validateReading] Erreur lors de la r√©cup√©ration du livre:', bookError);
      toast.error("Impossible de r√©cup√©rer les informations du livre: " + bookError.message);
      throw new Error("‚ùå Impossible de r√©cup√©rer les informations du livre");
    }
    
    console.log('üìö [validateReading] Infos du livre r√©cup√©r√©es:', bookData);
    const totalPages = bookData?.total_pages || 0;
    const newCurrentPage = (request.segment + 1) * 8000;
    
    // D√©terminer si le livre sera compl√©t√© apr√®s cette validation
    const newStatus: ReadingProgressStatus = newCurrentPage >= totalPages ? 'completed' : 'in_progress';
    console.log(`üìò [validateReading] Status calcul√©: ${newStatus} (newCurrentPage: ${newCurrentPage}, totalPages: ${totalPages})`);
    
    let progressId: string;
    
    if (!progress) {
      console.log('üìö [validateReading] Aucune progression existante, cr√©ation d\'une nouvelle entr√©e');
      
      // Cr√©er une nouvelle entr√©e de progression si elle n'existe pas
      const newProgressData = {
        user_id: request.user_id,
        book_id: request.book_id,
        current_page: newCurrentPage,
        total_pages: totalPages,
        status: newStatus,
        started_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      console.log('üìù [validateReading] Insertion reading_progress avec donn√©es:', newProgressData);
      const { data: newProgress, error: insertError } = await supabase
        .from('reading_progress')
        .insert(newProgressData)
        .select()
        .single();
      
      if (insertError) {
        console.error('‚ùå [validateReading] Erreur cr√©ation reading_progress:', insertError);
        toast.error("√âchec de cr√©ation de la progression de lecture: " + insertError.message);
        throw insertError;
      }
      
      console.log('‚úÖ [validateReading] reading_progress cr√©√© avec succ√®s:', newProgress);
      progressId = newProgress.id;
      toast.success("Nouvelle progression de lecture cr√©√©e!");
      
    } else {
      // Utiliser la progression existante et la mettre √† jour si n√©cessaire
      progressId = progress.id;
      
      // Ne mettre √† jour current_page que si la nouvelle valeur est sup√©rieure
      const updatedCurrentPage = Math.max(newCurrentPage, progress.current_page || 0);
      
      // V√©rifier si le segment est d√©j√† valid√©
      if (request.segment <= progress.chaptersRead) {
        console.log('üìù [validateReading] Segment already validated:', request.segment, 'chaptersRead:', progress.chaptersRead);
        
        return {
          message: "Segment d√©j√† valid√©",
          current_page: progress.current_page,
          already_validated: true,
          next_segment_question: null
        };
      }
      
      const updateData = {
        current_page: updatedCurrentPage,
        status: newStatus,
        updated_at: new Date().toISOString()
      };
      
      console.log('üìù [validateReading] Mise √† jour reading_progress avec donn√©es:', updateData);
      const { data: updatedProgress, error: progressError } = await supabase
        .from('reading_progress')
        .update(updateData)
        .eq('user_id', request.user_id)
        .eq('book_id', request.book_id)
        .select();

      if (progressError) {
        console.error('‚ùå [validateReading] Erreur mise √† jour reading_progress:', progressError);
        toast.error("√âchec de mise √† jour de la progression: " + progressError.message);
        throw progressError;
      }
      
      console.log('‚úÖ [validateReading] reading_progress mis √† jour avec succ√®s:', updatedProgress);
      toast.success("Progression de lecture mise √† jour!");
    }

    console.log('üîç [validateReading] R√©cup√©ration de la question pour segment suivant...');
    const question = await getQuestionForBookSegment(request.book_id, request.segment);
    console.log("üìö [validateReading] Question r√©cup√©r√©e:", question);

    const validationRecord: ReadingValidationRecord = {
      user_id: request.user_id,
      book_id: request.book_id,
      segment: request.segment,
      question_id: question?.id ?? null,
      correct: true,
      validated_at: new Date().toISOString(),
      answer: question?.answer ?? undefined,
      progress_id: progressId
    };

    console.log("üìù [validateReading] Insertion reading_validations avec donn√©es:", validationRecord);
    const { data: validationData, error: validationError } = await supabase
      .from('reading_validations')
      .insert(validationRecord);

    if (validationError) {
      console.error('‚ùå [validateReading] Erreur insertion reading_validations:', validationError);
      toast.error("√âchec d'enregistrement de la validation: " + validationError.message);
      throw validationError;
    }
    
    console.log("‚úÖ [validateReading] reading_validations ins√©r√© avec succ√®s:", validationData);
    toast.success("Validation enregistr√©e avec succ√®s!");

    await clearProgressCache(request.user_id);
    console.log(`‚úÖ [validateReading] Cache vid√© pour l'utilisateur ${request.user_id}`);

    // Mutation SWR - force refresh des donn√©es pour SWR
    mutate((key) => typeof key === 'string' && key.includes(`reading-progress-${request.user_id}`), undefined, true);
    // Mutation alternative si la premi√®re ne fonctionne pas
    mutate(() => getBookReadingProgress(request.user_id, request.book_id));
    
    console.log("‚úÖ [validateReading] SWR cache mutation triggered");

    console.log("üìä [validateReading] Enregistrement de l'activit√© de lecture...");
    await recordReadingActivity(request.user_id);
    console.log("üìä [validateReading] Ajout d'XP...");
    await addXP(request.user_id, 10);

    const nextSegment = request.segment + 1;
    const nextQuestion = await getQuestionForBookSegment(request.book_id, nextSegment);

    console.log("üèÜ [validateReading] V√©rification des badges...");
    const newBadges = await checkBadgesForUser(request.user_id, true);
    if(newBadges && newBadges.length > 0) {
      console.log("üèÜ [validateReading] Nouveaux badges obtenus:", newBadges);
    }

    setTimeout(async () => {
      try {
        console.log("üéØ [validateReading] V√©rification des qu√™tes en arri√®re-plan...");
        await checkUserQuests(request.user_id);
      } catch (error) {
        console.error("‚ùå [validateReading] Erreur lors de la v√©rification des qu√™tes:", error);
      }
    }, 0);

    setTimeout(async () => {
      try {
        console.log("üéÅ [validateReading] V√©rification des r√©compenses mensuelles en arri√®re-plan...");
        const monthlyReward = await checkAndGrantMonthlyReward(request.user_id);
        if (monthlyReward) {
          console.log("üéÅ [validateReading] R√©compense mensuelle obtenue:", monthlyReward);
        }
      } catch (error) {
        console.error("‚ùå [validateReading] Erreur lors de la v√©rification des r√©compenses mensuelles:", error);
      }
    }, 0);

    // Get updated progress after validation
    const updatedProgress = await getBookReadingProgress(request.user_id, request.book_id);
    console.log("üìä [validateReading] Progression mise √† jour:", updatedProgress);

    // Success toast only at the end when everything worked
    toast.success("Segment valid√© avec succ√®s!");
    
    console.log("üèÅ [validateReading] Processus de validation termin√© avec succ√®s");
    return {
      message: "Segment valid√© avec succ√®s",
      current_page: newCurrentPage,
      already_validated: false,
      next_segment_question: nextQuestion?.question ?? null,
      newBadges: newBadges.length > 0 ? newBadges : undefined
    };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Erreur inconnue";
    console.error('‚ùå [validateReading] Erreur finale de validation:', error);
    toast.error(`√âchec de la validation: ${errorMessage}`);
    throw new Error(errorMessage);
  }
};
